#!/usr/bin/env python3
"""
WG-Easy Telegram Bot —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º wg-easy —á–µ—Ä–µ–∑ Telegram + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–ª–∞–±—ã—Ö –º–∞—à–∏–Ω
"""

import subprocess
import requests
import time
import json
import logging
import threading
import os
from typing import Optional, Dict, Any
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
BASE_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
WG_EASY_URL = os.getenv("WG_EASY_URL", "http://localhost:51821")
MONITOR_INTERVAL = int(os.getenv("MONITOR_INTERVAL", "10"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏)
logging.basicConfig(
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

PERSISTENT_KEYBOARD = {
    "keyboard": [
        [{"text": "üìä –°—Ç–∞—Ç—É—Å"}, {"text": "üöÄ –°–∫–æ—Ä–æ—Å—Ç—å"}],
        [{"text": "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"}, {"text": "üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"}]
    ],
    "resize_keyboard": True,
    "is_persistent": True
}

class WGEasyBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WG-Easy —á–µ—Ä–µ–∑ Telegram —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session.timeout = 3  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
        self.monitoring_enabled = True
        self.last_status = None
        self.monitor_thread = None
        self.stop_monitoring = False
        
    def send_message(self, chat_id: int, text: str, reply_markup: Optional[Dict] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "Markdown"
            }
            if reply_markup:
                data["reply_markup"] = json.dumps(reply_markup)
            else:
                data["reply_markup"] = json.dumps(PERSISTENT_KEYBOARD)
            
            response = self.session.post(f"{BASE_URL}/sendMessage", data=data, timeout=5)
            response.raise_for_status()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def check_wg_easy_status(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å wg-easy —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ)
            result = subprocess.run(
                ["docker", "ps", "--filter", "name=wg-easy", "--format", "{{.Status}}"], 
                capture_output=True, text=True, timeout=2
            )
            container_status = result.stdout.strip()
            
            if not container_status or "up" not in container_status.lower():
                return False, "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å wg-easy
            result2 = subprocess.run(
                ["docker", "exec", "wg-easy", "ps", "aux"], 
                capture_output=True, text=True, timeout=2
            )
            
            if result2.returncode != 0:
                return False, "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            
            return True, "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
    
    def get_server_status(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            result = subprocess.run(
                ["docker", "ps", "--filter", "name=wg-easy", "--format", "{{.Status}}"], 
                capture_output=True, text=True, timeout=3
            )
            container_status = result.stdout.strip() or "–ù–µ –∑–∞–ø—É—â–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
            web_status = "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            try:
                response = requests.get(f"{WG_EASY_URL}/", timeout=2)
                if response.status_code == 200:
                    web_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            memory_usage = self._get_memory_usage()
            disk_usage = self._get_disk_usage()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            monitor_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if self.monitoring_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            
            return f"""üñ•Ô∏è *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ wg-easy*

üê≥ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä*: {container_status}
üåê *–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å*: {web_status}
üìä *–ü–∞–º—è—Ç—å*: {memory_usage}
üíæ *–î–∏—Å–∫*: {disk_usage}
üîî *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥*: {monitor_status}
üîó *URL*: {WG_EASY_URL}"""
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
    
    def get_speed_test(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (download/upload/ping)"""
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å: speedtest-cli JSON
            result = subprocess.run(
                ["speedtest-cli", "--json"],
                capture_output=True, text=True, timeout=90
            )
            if result.returncode != 0 or not result.stdout.strip():
                # –§–æ–ª–ª–±–µ–∫: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
                txt = subprocess.run(["speedtest-cli"], capture_output=True, text=True, timeout=90)
                if txt.returncode != 0:
                    return f"‚ùå –û—à–∏–±–∫–∞ speedtest: {result.stderr.strip() or txt.stderr.strip() or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
                out = txt.stdout
                # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥
                import re
                ping_match = re.search(r"Ping:\s*([0-9.]+) ms", out)
                down_match = re.search(r"Download:\s*([0-9.]+) Mbit/s", out)
                up_match = re.search(r"Upload:\s*([0-9.]+) Mbit/s", out)
                ping_ms = ping_match.group(1) if ping_match else "N/A"
                download_mbps = down_match.group(1) if down_match else "N/A"
                upload_mbps = up_match.group(1) if up_match else "N/A"
                return f"""üöÄ *–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏*

üì° *–°–µ—Ä–≤–µ—Ä*: {WG_EASY_URL}
üèì *Ping*: {ping_ms} ms
‚¨áÔ∏è *Download*: {download_mbps} Mbit/s
‚¨ÜÔ∏è *Upload*: {upload_mbps} Mbit/s"""
            data = json.loads(result.stdout)
            ping_ms = round(float(data.get("ping", 0))) if "ping" in data else "N/A"
            download_mbps = round(float(data.get("download", 0)) / 1_000_000, 2) if "download" in data else "N/A"
            upload_mbps = round(float(data.get("upload", 0)) / 1_000_000, 2) if "upload" in data else "N/A"
            return f"""üöÄ *–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏*

üì° *–°–µ—Ä–≤–µ—Ä*: {WG_EASY_URL}
üèì *Ping*: {ping_ms} ms
‚¨áÔ∏è *Download*: {download_mbps} Mbit/s
‚¨ÜÔ∏è *Upload*: {upload_mbps} Mbit/s"""
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    def restart_container(self) -> str:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        try:
            logger.error("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ wg-easy")
            result = subprocess.run(["docker", "restart", "wg-easy"], capture_output=True, text=True, timeout=60)
            if result.returncode != 0:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {result.stderr.strip() or result.stdout.strip() or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}"
            time.sleep(2)
            status = subprocess.run(
                ["docker", "ps", "--filter", "name=wg-easy", "--format", "{{.Status}}"],
                capture_output=True, text=True, timeout=5
            )
            status_text = status.stdout.strip() or "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            return f"‚úÖ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!*\n\n–°—Ç–∞—Ç—É—Å: {status_text}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {str(e)}"
    
    def toggle_monitoring(self) -> str:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitoring_enabled = not self.monitoring_enabled
        status = "–≤–∫–ª—é—á–µ–Ω" if self.monitoring_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω"
        return f"üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {status}"
    
    def _get_memory_usage(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
        try:
            result = subprocess.run(["free", "-h"], capture_output=True, text=True, timeout=2)
            lines = result.stdout.split('\n')[1].split()
            used = lines[2]
            total = lines[1]
            return f"{used}/{total}"
        except:
            return "N/A"
    
    def _get_disk_usage(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞"""
        try:
            result = subprocess.run(["df", "-h", "/"], capture_output=True, text=True, timeout=2)
            lines = result.stdout.split('\n')[1].split()
            used = lines[2]
            total = lines[1]
            return f"{used}/{total}"
        except:
            return "N/A"
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.monitor_thread and self.monitor_thread.is_alive():
            return
        
        self.stop_monitoring = False
        self.monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.monitor_thread.start()
        print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_monitoring_thread(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.stop_monitoring = True
        if self.monitor_thread:
            self.monitor_thread.join(timeout=2)
        print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        while not self.stop_monitoring and self.monitoring_enabled:
            try:
                is_healthy, status_msg = self.check_wg_easy_status()
                current_time = datetime.now().strftime("%H:%M:%S")
                
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è —Å —Ä–∞–±–æ—á–µ–≥–æ –Ω–∞ –Ω–µ—Ä–∞–±–æ—á–∏–π
                if self.last_status is True and not is_healthy:
                    alert_message = f"""üö® *–ê–õ–ï–†–¢: WG-Easy –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!*

‚è∞ *–í—Ä–µ–º—è*: {current_time}
‚ùå *–°—Ç–∞—Ç—É—Å*: {status_msg}
üîß *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è*: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
                    
                    print(f"WG-Easy –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {status_msg}")
                    self.send_message(ADMIN_ID, alert_message)
                
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è —Å –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ –Ω–∞ —Ä–∞–±–æ—á–∏–π
                elif self.last_status is False and is_healthy:
                    recovery_message = f"""‚úÖ *–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: WG-Easy —Ä–∞–±–æ—Ç–∞–µ—Ç!*

‚è∞ *–í—Ä–µ–º—è*: {current_time}
‚úÖ *–°—Ç–∞—Ç—É—Å*: {status_msg}
üéâ *–°–µ—Ä–≤–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*"""
                    
                    print(f"WG-Easy –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {status_msg}")
                    self.send_message(ADMIN_ID, recovery_message)
                
                self.last_status = is_healthy
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                time.sleep(MONITOR_INTERVAL)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(MONITOR_INTERVAL)

def create_main_menu() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return {
        "inline_keyboard": [
            [{"text": "üìä –°—Ç–∞—Ç—É—Å", "callback_data": "status"}],
            [{"text": "üöÄ –°–∫–æ—Ä–æ—Å—Ç—å", "callback_data": "speed"}],
            [{"text": "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", "callback_data": "restart"}],
            [{"text": "üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "callback_data": "monitoring"}]
        ]
    }

def create_restart_confirmation() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
    return {
        "inline_keyboard": [
            [{"text": "‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", "callback_data": "restart_confirm"}],
            [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cancel"}]
        ]
    }

def handle_message(bot: WGEasyBot, message: Dict[str, Any]) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    chat_id = message["chat"]["id"]
    text = message.get("text", "")
    
    if chat_id != ADMIN_ID:
        bot.send_message(chat_id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if text == "/start" or text == "start" or text == "üß≠ –ú–µ–Ω—é":
        bot.send_message(chat_id, "ü§ñ *WG-Easy Bot —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º*\n–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        
    elif text in ("/status", "üìä –°—Ç–∞—Ç—É—Å"):
        status = bot.get_server_status()
        bot.send_message(chat_id, status)
     
    elif text in ("/speed", "üöÄ –°–∫–æ—Ä–æ—Å—Ç—å"):
        speed = bot.get_speed_test()
        bot.send_message(chat_id, speed)
     
    elif text in ("/restart", "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"):
        keyboard = create_restart_confirmation()
        bot.send_message(
            chat_id,
            "üîÑ *–í—ã —É–≤–µ—Ä–µ–Ω—ã?*\n\n–≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä wg-easy –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ—Ä–≤—ë—Ç VPN —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.",
            keyboard
        )
     
    elif text in ("/monitoring", "üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"):
        monitor_status = bot.toggle_monitoring()
        bot.send_message(chat_id, monitor_status)

def handle_callback(bot: WGEasyBot, callback_query: Dict[str, Any]) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏"""
    chat_id = callback_query["message"]["chat"]["id"]
    data = callback_query["data"]
    
    if chat_id != ADMIN_ID:
        bot.send_message(chat_id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if data == "status":
        status = bot.get_server_status()
        bot.send_message(chat_id, status)
        
    elif data == "speed":
        speed = bot.get_speed_test()
        bot.send_message(chat_id, speed)
        
    elif data == "restart":
        keyboard = create_restart_confirmation()
        bot.send_message(
            chat_id, 
            "üîÑ *–í—ã —É–≤–µ—Ä–µ–Ω—ã?*\n\n–≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä wg-easy –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ—Ä–≤—ë—Ç VPN —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.", 
            keyboard
        )
        
    elif data == "restart_confirm":
        result = bot.restart_container()
        bot.send_message(chat_id, result)
        
    elif data == "cancel":
        bot.send_message(chat_id, "‚ùå –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    elif data == "monitoring":
        monitor_status = bot.toggle_monitoring()
        bot.send_message(chat_id, monitor_status)
    
    # –ë–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ –º–µ–Ω—é; –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–∂–µ –≤–∏–¥–Ω—ã

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ó–∞–ø—É—Å–∫ WG-Easy Telegram Bot —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TELEGRAM_TOKEN:
        print("–û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        exit(1)
    
    if not ADMIN_ID:
        print("–û–®–ò–ë–ö–ê: ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        exit(1)
    
    bot = WGEasyBot()
    last_update_id = 0
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    bot.start_monitoring()
    
    try:
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                response = bot.session.get(
                    f"{BASE_URL}/getUpdates", 
                    params={"offset": last_update_id + 1, "timeout": 30}
                )
                response.raise_for_status()
                updates = response.json()
                
                if updates["ok"]:
                    for update in updates["result"]:
                        last_update_id = update["update_id"]
                        
                        if "message" in update:
                            handle_message(bot, update["message"])
                        elif "callback_query" in update:
                            handle_callback(bot, update["callback_query"])
                
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(5)
                
    except KeyboardInterrupt:
        print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    finally:
        bot.stop_monitoring_thread()
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()
